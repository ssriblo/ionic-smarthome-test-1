# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class TemperatureSensorGet(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, value: int=None, timestamp: datetime=None, status: str=None):  # noqa: E501
        """TemperatureSensorGet - a model defined in Swagger

        :param id: The id of this TemperatureSensorGet.  # noqa: E501
        :type id: str
        :param name: The name of this TemperatureSensorGet.  # noqa: E501
        :type name: str
        :param value: The value of this TemperatureSensorGet.  # noqa: E501
        :type value: int
        :param timestamp: The timestamp of this TemperatureSensorGet.  # noqa: E501
        :type timestamp: datetime
        :param status: The status of this TemperatureSensorGet.  # noqa: E501
        :type status: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'value': int,
            'timestamp': datetime,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'value': 'value',
            'timestamp': 'timestamp',
            'status': 'status'
        }
        self._id = id
        self._name = name
        self._value = value
        self._timestamp = timestamp
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'TemperatureSensorGet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TemperatureSensorGet of this TemperatureSensorGet.  # noqa: E501
        :rtype: TemperatureSensorGet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this TemperatureSensorGet.

        the unique identifier for the zone  # noqa: E501

        :return: The id of this TemperatureSensorGet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this TemperatureSensorGet.

        the unique identifier for the zone  # noqa: E501

        :param id: The id of this TemperatureSensorGet.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this TemperatureSensorGet.


        :return: The name of this TemperatureSensorGet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TemperatureSensorGet.


        :param name: The name of this TemperatureSensorGet.
        :type name: str
        """

        self._name = name

    @property
    def value(self) -> int:
        """Gets the value of this TemperatureSensorGet.

        the temperature in \"Kelvin\", step=0.1K  # noqa: E501

        :return: The value of this TemperatureSensorGet.
        :rtype: int
        """
        return self._value

    @value.setter
    def value(self, value: int):
        """Sets the value of this TemperatureSensorGet.

        the temperature in \"Kelvin\", step=0.1K  # noqa: E501

        :param value: The value of this TemperatureSensorGet.
        :type value: int
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this TemperatureSensorGet.

        the timestamp when the temperature was measured  # noqa: E501

        :return: The timestamp of this TemperatureSensorGet.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this TemperatureSensorGet.

        the timestamp when the temperature was measured  # noqa: E501

        :param timestamp: The timestamp of this TemperatureSensorGet.
        :type timestamp: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def status(self) -> str:
        """Gets the status of this TemperatureSensorGet.


        :return: The status of this TemperatureSensorGet.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this TemperatureSensorGet.


        :param status: The status of this TemperatureSensorGet.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status
